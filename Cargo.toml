[package]
name = "blog_os"
version = "0.1.0"
edition = "2021"
authors = ["Au Or <au.or@github.com>"]

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

#voir shuld_panic
#le lanceur de test n'est pas vraiment nécessaire. Pour des cas comme celui-ci, nous pouvons désactiver complètement le lanceur de test et exécuter notre test directement dans la _startfonction.
#La clé pour cela est de désactiver l' harnessindicateur pour le test dans le Cargo.toml, qui définit si un exécuteur de test est utilisé pour un test d'intégration. Lorsqu'il est défini sur false, le lanceur de test par défaut et la fonctionnalité de lanceur de test personnalisé sont désactivés, de sorte que le test est traité comme un exécutable normal.
[[test]]
name = "should_panic"
harness = false
#Pour tester notre nouveau gdtmodule et s'assurer que le gestionnaire de double faute est correctement appelé sur un débordement de pile, nous pouvons ajouter un test d'intégration. L'idée est de provoquer une double faute dans la fonction de test et de vérifier que le gestionnaire de double faute est appelé.
#Comme notre panic_handlertest, le test se déroulera sans harnais de test . La raison en est que nous ne pouvons pas continuer l'exécution après une double faute, donc plus d'un test n'a pas de sens. Pour désactiver le harnais de test pour le test, nous ajoutons ce qui suit à notreCargo.toml :
[[test]]
name = "stack_overflow"
harness = false
#Maintenant cargo test --test stack_overflowdevrait compiler avec succès. Le test échoue bien sûr, puisque la unimplementedmacro panique.

# le profile utilisé pour `cargo build`
#[profile.dev]
#panic = "abort" # désactive le déroulement de la pile lors d'un panic

# le profile utilisé pour `cargo build --release`
#[profile.release]
#panic = "abort" # désactive le déroulement de la pile lors d'un panic

#Au lieu d'écrire notre propre bootloader, qui est un projet en soi, nous utilisons le bootloadercrate. Cette caisse implémente un chargeur de démarrage BIOS de base sans aucune dépendance C, juste Rust et assemblage en ligne
[dependencies]
bootloader = { version = "0.9.8", features = ["map_physical_memory"]} #nous ajoutons la map_physical_memoryfonctionnalité à notre bootloaderdépendance 
#le compilateur peut décider que nos ecritures avec nos fonctions et le tampon vga sont inutiles et peuvent être omises
#Afin d'utiliser les écritures volatiles pour le tampon VGA, nous utilisons la bibliothèque volatile . Cette caisse (c'est ainsi que les packages sont appelés dans le monde Rust) fournit un Volatiletype de wrapper avec readet des writeméthodes. Ces méthodes utilisent en interne les fonctions read_volatile et write_volatile de la bibliothèque principale et garantissent ainsi que les lectures/écritures ne sont pas optimisées.
volatile = "0.2.6"
#Pour obtenir une mutabilité intérieure synchronisée, les utilisateurs de la bibliothèque standard peuvent utiliser Mutex .
#Il fournit une exclusion mutuelle en bloquant les threads lorsque la ressource est déjà verrouillée. Mais notre noyau de base n'a pas de support de blocage ni même de concept de threads, nous ne pouvons donc pas l'utiliser non plus.
# le spinlock . Au lieu de bloquer, les threads essaient simplement de le verrouiller encore et encore dans une boucle serrée et donc de brûler du temps CPU jusqu'à ce que le mutex soit à nouveau libre.
spin = "0.5.2"
#pour les entrees sorties avec isa-debug etc. etc. 
x86_64 = "0.14.2"
#Un moyen simple d'envoyer les données consiste à utiliser le port série , une ancienne norme d'interface qui ne se trouve plus dans les ordinateurs modernes. Il est facile à programmer et QEMU peut rediriger les octets envoyés en série vers la sortie standard de l'hôte ou vers un fichier.
uart_16550 = "0.2.0"
#La configuration se produit en écrivant des valeurs spéciales dans les ports de commande et de données des PIC. Heureusement, il existe déjà un crate appelé pic8259
pic8259 = "0.10.1"
pc-keyboard = "0.5.0"
#Son nom vient du fait qu'il utilise une structure de données de liste chaînée pour garder une trace des régions de mémoire désallouées. Voir le post suivant pour une explication plus détaillée de cette approche.
linked_list_allocator = "0.9.0"

[dependencies.lazy_static]
version = "1.0"
features = ["spin_no_std"]

#nous avons une boucle sans fin à la fin de notre _startfonction et devons fermer QEMU manuellement à chaque exécution de cargo test
#il y a une trappe d'évacuation : QEMU prend en charge un isa-debug-exitdispositif spécial, qui fournit un moyen facile de quitter QEMU du système invité. Pour l'activer, nous devons passer un -deviceargument à QEMU. Nous pouvons le faire en ajoutant une package.metadata.bootimage.test-argsclé de configuration dans notre Cargo.toml
[package.metadata.bootimage]
#en quittant qemu apres les tests, meme s'ils ont reussi cargo considere tout les codes de sortie differents de 0 comme des erreurs
#Pour contourner ce problème, bootimagefournit une test-success-exit-codeclé de configuration qui mappe un code de sortie spécifié au code de sortie 0
#Avec cette configuration, bootimagemappe notre code de sortie de réussite sur le code de sortie 0, de sorte qu'il cargo testreconnaisse correctement le cas de réussite et ne compte pas le test comme ayant échoué.
test-args = [
    "-device", "isa-debug-exit,iobase=0xf4,iosize=0x04", "-serial", "stdio",
    "-display", "none"
]  
test-success-exit-code = 33         # (0x10 << 1) | 1
#en diminue temporairement le temps accorder au test (chaque test avait par defaut 5 mins)
test-timeout = 300  #(en secondes)
