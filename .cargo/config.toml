#Elle permet de recompiler coreet d'autres caisses de bibliothèques standard à la demande, au lieu d'utiliser les versions précompilées fournies avec l'installation de Rust.
#Cela indique à cargo qu'il doit recompiler les bibliothèques coreet . compiler_builtinsCe dernier est requis car il s'agit d'une dépendance de core
[unstable]
#les fonctions basiques memset, memcpy etc ne sont plus dispo. Mais le compiler_builtinscrate contient déjà des implémentations pour toutes les fonctions nécessaires, elles sont simplement désactivées par défaut pour ne pas entrer en collision avec les implémentations de la bibliothèque C. Nous pouvons les activer en définissant
build-std-features = ["compiler-builtins-mem"]
build-std = ["core", "compiler_builtins", "alloc"]

[build]
target = "x86_64-blog_os.json"

#Le target.'cfg(target_os = "none")'tableau s'applique à toutes les cibles qui ont défini le "os"champ de leur fichier de configuration cible sur "none". Cela inclut notre x86_64-blog_os.jsoncible. La runnerclé spécifie la commande qui doit être invoquée pour cargo run. La commande est exécutée après une construction réussie avec le chemin de l'exécutable passé comme premier argument
[target.'cfg(target_os = "none")']
#La runnerclé spécifie la commande qui doit être invoquée pour cargo run. La commande est exécutée après une construction réussie avec le chemin de l'exécutable passé comme premier argument.
runner = "bootimage runner"

